basePath: /
definitions:
  controllers.errorResponse:
    properties:
      message:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  gorm.Model:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Blog:
    properties:
      blog_content:
        type: string
      blog_title:
        type: string
      category_id:
        type: integer
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      user:
        $ref: '#/definitions/gorm.Model'
      user_id:
        type: integer
    required:
    - user_id
    type: object
  models.Role:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      role_name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Tag:
    properties:
      blogs:
        items:
          $ref: '#/definitions/models.Blog'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      tag_name:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      blogs:
        items:
          $ref: '#/definitions/models.Blog'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for CRUD Application
  title: CRUD Application
  version: "1.2"
paths:
  /login-verify:
    post:
      consumes:
      - application/json
      description: Login my user
      parameters:
      - description: Account ID
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.errorResponse'
      summary: Login user
  /register:
    post:
      consumes:
      - application/json
      description: Register my user
      parameters:
      - description: Account ID
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.errorResponse'
      summary: Register user
  /swag/blogs:
    get:
      consumes:
      - application/json
      description: Get all blogs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Blog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.errorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/controllers.errorResponse'
      summary: GetBlogs
      tags:
      - swag
swagger: "2.0"
